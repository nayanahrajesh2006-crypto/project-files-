# -*- coding: utf-8 -*-
"""Copy of  Dogs_vs_cats project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A-GpKdLGUUO1Q2YNrVhYjONKJ4cfcle_
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
import matplotlib.pyplot as plt
import os

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d tongpython/cat-and-dog
!unzip cat-and-dog.zip -d /content/cats_and_dogs

print(os.listdir("/content/cats_and_dogs"))

train_dir = "/content/cats_and_dogs/training_set/training_set"
test_dir = "/content/cats_and_dogs/test_set/test_set"

IMG_SIZE = 128
BATCH_SIZE = 32

train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_data = train_datagen.flow_from_directory(
    train_dir,
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

test_data = test_datagen.flow_from_directory(
    test_dir,
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
    MaxPooling2D(2,2),

    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),

    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification (cat/dog)
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(
    train_data,
    validation_data=test_data,
    epochs=10
)

loss, acc = model.evaluate(test_data)
print("Test Accuracy:", acc)

from tensorflow.keras.preprocessing import image
import numpy as np

# Change filename to your uploaded image
img_path = "/content/cats_and_dogs/training_set/training_set/cats/cat.1000.jpg"   # or whatever name Colab shows

IMG_SIZE = 128  # same size used in training
img = image.load_img(img_path, target_size=(IMG_SIZE, IMG_SIZE))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)  # batch of 1

prediction = model.predict(img_array)[0][0]

if prediction < 0.5:
    print("Prediction: 🐱 Cat")
else:
    print("Prediction: 🐶 Dog")

model.save("/content/cat_dog_model.h5")